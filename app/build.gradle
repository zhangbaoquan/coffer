apply plugin: 'com.android.application'
apply plugin: 'com.didi.dokit'
apply plugin: 'com.google.gms.google-services'
//apply plugin: 'androidx.navigation.safeargs'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.coffer.app"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            /** 设置支持的SO库架构 **/
            abiFilters 'armeabi' ,'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

        javaCompileOptions {

            annotationProcessorOptions {

                arguments = [moduleName :project.getName() ]

            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    android.applicationVariants.all{variant ->
        variant.outputs.all{ output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')){
                def fileName = outputFile.name.replace("app",
                "${defaultConfig.applicationId}_${defaultConfig.versionName}_${releaseTime()}")
                outputFileName = fileName
            }

        }
    }

    // 使用Google的数据绑定库
    dataBinding {
        enabled = true
    }
    repositories {
        flatDir {
            dirs 'libs' //this way we can find the .aar file in libs folder
        }
    }
}

static def releaseTime(){
    return new Date().format("yyyy-MM-dd",TimeZone.getTimeZone("UTC"))
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:multidex:2.0.1'
    annotationProcessor "androidx.room:room-compiler:$rootProject.roomVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$rootProject.glideVersion"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycleVersion"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.constraintlayout:constraintlayout-solver:1.1.3'
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$rootProject.lifecycleVersion"
    implementation "androidx.navigation:navigation-fragment:$rootProject.navigationVersion"
    implementation "androidx.navigation:navigation-ui:$rootProject.navigationVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.work:work-runtime:$rootProject.workVersion"
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    implementation "com.google.guava:guava:$rootProject.guavaVersion"
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.squareup.retrofit2:retrofit:2.2.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.6'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'

    implementation 'androidx.fragment:fragment:1.2.4'
    implementation 'androidx.legacy:legacy-support-core-ui:1.0.0'
    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.media:media:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'

    // Testing dependencies
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$rootProject.uiAutomatorVersion"
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    testImplementation "junit:junit:$rootProject.junitVersion"

    debugImplementation "com.didichuxing.doraemonkit:doraemonkit:3.1.5"
    releaseImplementation "com.didichuxing.doraemonkit:doraemonkit-no-op:3.1.5"

//    implementation (name: 'ireader', ext: 'aar')

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'

    implementation 'com.dianping.android.sdk:logan:1.2.2'

//    implementation 'com.iqiyi.xcrash:xcrash-android-lib:2.4.9'
    implementation 'com.blankj:utilcodex:1.28.4'
    implementation 'com.tencent:mmkv-static:1.2.2'

    implementation 'com.didi.virtualapk:core:0.9.8'

    compile'com.alibaba:arouter-api:1.3.1'

    annotationProcessor'com.alibaba:arouter-compiler:1.1.4'

    api 'com.google.firebase:firebase-core:11.2.0'
    implementation 'com.google.firebase:firebase-analytics'

    // 接入x2c
//    annotationProcessor 'com.zhangyue.we:x2c-apt:1.1.2'
//    implementation 'com.zhangyue.we:x2c-lib:1.0.6'


}

task printTest{
//    def name = 'coffer'
//    println "my name : ${name}"
//    println "工程名 ： "+project.name

//    def map = ['width':'1080','height':'1920']
//    println map['width']
//    println map.height
//
//    Person p = new Person()
//    p.age = 10
//    logger.info("coffer","age:"+p.age)
//
//    add(1,2)

    // 使用自定义闭包1
//    myEach{
//        it
//    }

    // 使用自定义闭包2
    myEach2{
        k,v ->
            println "${k} is ${v}"
    }

    def date = buildTime()
    println "今天: "+date
}

def buildTime(){
    def formattedDate = new Date().format('yyyymmdd')
    return formattedDate
}


// 使用自定义闭包1
def myEach(closure){
    // 模拟有10个元素开始迭代
    for (int i : 1..10){
        println i
        closure(i)
    }
}

// 使用自定义闭包2
def myEach2(closure){
    def map = ['name':'coffer','age':'26']
    map.each{
        closure(it.key,it.value)
    }
}

def add(int a,int b){
    println "a+b = ${a+b}"
}

class Person{
    public String age
}
